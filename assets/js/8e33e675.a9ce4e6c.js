"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[677],{4204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var s=n(6070),r=n(7468);const a={id:"recipes",title:"Recipes",sidebar_label:"Recipes"},i=void 0,c={id:"recipes",title:"Recipes",description:"React Tracked provides a primitive API,",source:"@site/docs/recipes.md",sourceDirName:".",slug:"/recipes",permalink:"/docs/recipes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"recipes",title:"Recipes",sidebar_label:"Recipes"},sidebar:"docs",previous:{title:"API",permalink:"/docs/api"},next:{title:"Debugging",permalink:"/docs/debugging"}},d={},o=[{value:"Recipes for createContainer",id:"recipes-for-createcontainer",level:2},{value:"useReducer (props)",id:"usereducer-props",level:3},{value:"useReducer (embedded)",id:"usereducer-embedded",level:3},{value:"useState (props)",id:"usestate-props",level:3},{value:"useState (empty object)",id:"usestate-empty-object",level:3},{value:"useReducer (with persistence)",id:"usereducer-with-persistence",level:3},{value:"useState (with propState)",id:"usestate-with-propstate",level:3},{value:"useReducer (with event listener)",id:"usereducer-with-event-listener",level:3},{value:"useState (with update functions)",id:"usestate-with-update-functions",level:3},{value:"Recipes for useTrackedState and useTracked",id:"recipes-for-usetrackedstate-and-usetracked",level:2},{value:"useSelectorWithTracking",id:"useselectorwithtracking",level:3},{value:"useTrackedByName (based on useState)",id:"usetrackedbyname-based-on-usestate",level:3},{value:"useTrackedWithImmer (based on useState)",id:"usetrackedwithimmer-based-on-usestate",level:3},{value:"Recipes for useUpdate (useDispatch)",id:"recipes-for-useupdate-usedispatch",level:2},{value:"useSafeDispatch",id:"usesafedispatch",level:3}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:["import TabsUsedByRemarkPluginTs2Js from '@theme/Tabs';\nimport TabItemUsedByRemarkPluginTs2Js from '@theme/TabItem';","\n",(0,s.jsx)(t.p,{children:"React Tracked provides a primitive API,\nand there are various ways to use it for apps."}),"\n",(0,s.jsx)(t.h2,{id:"recipes-for-createcontainer",children:"Recipes for createContainer"}),"\n",(0,s.jsxs)(t.p,{children:["The argument ",(0,s.jsx)(t.code,{children:"useValue"})," in ",(0,s.jsx)(t.code,{children:"createContainer"})," is so flexible\nand there are various usages."]}),"\n",(0,s.jsx)(t.h3,{id:"usereducer-props",children:"useReducer (props)"}),"\n",(0,s.jsxs)(t.p,{children:["This is the most typical usage.\nYou define a generic reducer and pass ",(0,s.jsx)(t.code,{children:"reducer"})," and ",(0,s.jsx)(t.code,{children:"initialState"})," as props."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(({ reducer, initialState, init }) => useReducer(reducer, initialState, init));\n\nconst reducer = ...;\n\nconst App = ({ initialState }) => (\n  <Provider reducer={reducer} initialState={initialState}>\n    ...\n  </Provider>\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usereducer-embedded",children:"useReducer (embedded)"}),"\n",(0,s.jsxs)(t.p,{children:["For most cases, you would have a static reducer.\nIn this case, define useValue with the reducer in advance.\nThe ",(0,s.jsx)(t.code,{children:"initialState"})," can be defined in useValue like the following example,\nor can be taken from props: ",(0,s.jsx)(t.code,{children:"({ initialState }) => useReducer(...)"})]}),"\n",(0,s.jsxs)(t.p,{children:["This is good for TypeScript because the hooks returned by ",(0,s.jsx)(t.code,{children:"createContainer"})," is already typed."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const reducer = ...;\nconst initialState = ...;\n\nconst {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(() => useReducer(reducer, initialState));\n\n\nconst App = () => (\n  <Provider>\n    ...\n  </Provider>\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usestate-props",children:"useState (props)"}),"\n",(0,s.jsx)(t.p,{children:"If you don't need reducer, useState would be simpler."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(({ initialState }) => useState(initialState);\n\n\nconst App = ({ initialState }) => (\n  <Provider initialState={initialState}>\n    ...\n  </Provider>\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usestate-empty-object",children:"useState (empty object)"}),"\n",(0,s.jsx)(t.p,{children:"You could even start with completely an empty object."}),"\n",(0,s.jsxs)(t.p,{children:["This might not be TypeScript friendly. Although, you could do this: ",(0,s.jsx)(t.code,{children:"useState<State>({})"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(() => useState({});\n\nconst App = () => (\n  <Provider>\n    ...\n  </Provider>\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usereducer-with-persistence",children:"useReducer (with persistence)"}),"\n",(0,s.jsx)(t.p,{children:"Here's how to persist state in localStorage."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const reducer = ...;\nconst initialState = ...; // used only if localStorage is empty.\nconst storageKey = 'persistedState';\n\nconst init = () => {\n  let preloadedState;\n  try {\n    preloadedState =  JSON.parse(window.localStorage.getItem(storageKey));\n    // validate preloadedState if necessary\n  } catch (e) {\n    // ignore\n  }\n  return preloadedState || initialState;\n};\n\nconst useValue = () => {\n  const [state, dispatch] = useReducer(reducer, null, init);\n  useEffect(() => {\n    window.localStorage.setItem(storageKey, JSON.stringify(state));\n  }, [state]);\n  return [state, dispatch];\n};\n\nconst {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(useValue);\n\nconst App = () => (\n  <Provider>\n    ...\n  </Provider>\n);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Using async storage is a bit tricky.\nSee ",(0,s.jsx)(t.a,{href:"https://github.com/dai-shi/react-tracked/issues/8#issuecomment-548095476",children:"the thread"})," for an example."]}),"\n",(0,s.jsx)(t.h3,{id:"usestate-with-propstate",children:"useState (with propState)"}),"\n",(0,s.jsx)(t.p,{children:"If you already have a state and would like to use Provider with it,\nyou can sync a container state with a state from props."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const useValue = ({ propState }) => {\n  const [state, setState] = useState(propState);\n  useEffect(() => {\n    // or useLayoutEffect\n    setState(propState);\n  }, [propState]);\n  return [state, setState];\n};\n\nconst {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(useValue);\n\nconst App = ({ propState }) => <Provider propState={propState}>...</Provider>;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note that ",(0,s.jsx)(t.code,{children:"propState"})," has to be updated immutably."]}),"\n",(0,s.jsx)(t.h3,{id:"usereducer-with-event-listener",children:"useReducer (with event listener)"}),"\n",(0,s.jsx)(t.p,{children:"Here's how to dispatch actions by DOM events."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const reducer = ...;\nconst initialState = ...;\n\nconst useValue = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const listener = () => {\n      dispatch({\n        type: 'WINDOW_RESIZED',\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  }, []);\n  return [state, dispatch];\n};\n\nconst {\n  Provider,\n  useTracked,\n  // ...\n} = createContainer(useValue);\n\nconst App = () => (\n  <Provider>\n    ...\n  </Provider>\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usestate-with-update-functions",children:"useState (with update functions)"}),"\n",(0,s.jsxs)(t.p,{children:["If you want to have custom update functions,\nyou can store them in a state object.\nBe sure to use ",(0,s.jsx)(t.code,{children:"useCallback"})," and ",(0,s.jsx)(t.code,{children:"useMemo"}),"\nto make the state object stable."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const useValue = () => {\n  const [count, setCount] = useState(0);\n  const increment = useCallback(() => setCount((c) => c + 1), []);\n  const decrement = useCallback(() => setCount((c) => c - 1), []);\n  const state = useMemo(\n    () => ({\n      count,\n      increment,\n      decrement,\n    }),\n    [count, increment, decrement],\n  );\n  return [\n    state,\n    () => {\n      throw new Error('use functions in the state');\n    },\n  ];\n};\n\nconst { Provider, useTrackedState } = createContainer(useValue);\n\nconst App = () => <Provider>...</Provider>;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note: With custom update functions, you don't get the benefit\neven if you enable ",(0,s.jsx)(t.code,{children:"concurrentMode"})," in ",(0,s.jsx)(t.code,{children:"createContainer"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"recipes-for-usetrackedstate-and-usetracked",children:"Recipes for useTrackedState and useTracked"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useTrackedState"})," and ",(0,s.jsx)(t.code,{children:"useTracked"})," hooks are useful as is,\nbut new hooks can also be created based on them."]}),"\n",(0,s.jsx)(t.h3,{id:"useselectorwithtracking",children:"useSelectorWithTracking"}),"\n",(0,s.jsx)(t.p,{children:"Selector interface is useful to share selection logic.\nYou can create a selector hook with state usage tracking very easily."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const useSelectorWithTracking = (selector) => selector(useTrackedState());\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note: This is different from ",(0,s.jsx)(t.code,{children:"useSelector"})," which has no tracking support\nand triggers re-render based on the ref equality of selected value."]}),"\n",(0,s.jsx)(t.h3,{id:"usetrackedbyname-based-on-usestate",children:"useTrackedByName (based on useState)"}),"\n",(0,s.jsxs)(t.p,{children:["Sometimes, you might want to select a state by its property name.\nHere's a custom hook to return a tuple ",(0,s.jsx)(t.code,{children:"[value, setValue]"})," selected by a name."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const useTrackedByName = (name) => {\n  const [state, setState] = useTracked();\n  const update = useCallback(\n    (newVal) => {\n      setState((oldVal) => ({\n        ...oldVal,\n        [name]: typeof newVal === 'function' ? newVal(oldVal[name]) : newVal,\n      }));\n    },\n    [setState, name],\n  );\n  return [state[name], update];\n};\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usetrackedwithimmer-based-on-usestate",children:"useTrackedWithImmer (based on useState)"}),"\n",(0,s.jsxs)(t.p,{children:["Updating a property deep in a state object is troublesome.\nHere's a custom hook to use ",(0,s.jsx)(t.a,{href:"https://github.com/immerjs/immer",children:"immer"})," for setState."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import produce from 'immer';\n\nconst useTrackedWithImmer = () => {\n  const [state, setState] = useTracked();\n  const update = useCallback(\n    (updater) => {\n      setState((oldVal) => produce(oldVal, updater));\n    },\n    [setState],\n  );\n  return [state, update];\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note: This can also be done at ",(0,s.jsx)(t.code,{children:"createContainer"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"recipes-for-useupdate-usedispatch",children:"Recipes for useUpdate (useDispatch)"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useUpdate"})," simply returns the second item\nin a tuple returned by ",(0,s.jsx)(t.code,{children:"useState"})," or ",(0,s.jsx)(t.code,{children:"useReducer"}),".\nIt can also be extended as a custom hook."]}),"\n",(0,s.jsx)(t.h3,{id:"usesafedispatch",children:"useSafeDispatch"}),"\n",(0,s.jsxs)(t.p,{children:["This is a modified version of useDispatch that calls ",(0,s.jsx)(t.code,{children:"getUntrackedObject"}),"\nrecursively on an action object before dispatching it."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import { getUntrackedObject } from 'react-tracked';\n\nconst untrackDeep = (obj) => {\n  if (typeof obj !== 'object' || obj === null) return obj;\n  const untrackedObj = getUntrackedObject(obj);\n  if (untrackedObj !== null) return untrackedObj;\n  const newObj = {};\n  let modified = false;\n  Object.entries(obj).forEach(([k, v]) => {\n    newObj[k] = untrackDeep(v);\n    if (newObj[k] !== null) {\n      modified = true;\n    } else {\n      newObj[k] = v;\n    }\n  });\n  return modified ? newObj : obj;\n};\n\nconst useSafeDispatch = () => {\n  const dispatch = useDispatch();\n  return useCallback(\n    (action) => {\n      dispatch(untrackDeep(action));\n    },\n    [dispatch],\n  );\n};\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},7468:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(758);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);