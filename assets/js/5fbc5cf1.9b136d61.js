"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[624],{7987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(6070),s=n(7468);const a={id:"api",title:"API",sidebar_label:"API"},c=void 0,o={id:"api",title:"API",description:"There are two main functions exported from the library,",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"api",title:"API",sidebar_label:"API"},sidebar:"docs",previous:{title:"Person Name (zustand)",permalink:"/docs/tutorial-zustand-01"},next:{title:"Recipes",permalink:"/docs/recipes"}},i={},d=[{value:"createTrackedSelector",id:"createtrackedselector",level:2},{value:"createContainer",id:"createcontainer",level:2},{value:"Provider",id:"provider",level:3},{value:"useTracked",id:"usetracked",level:3},{value:"useUpdate",id:"useupdate",level:3},{value:"useTrackedState",id:"usetrackedstate",level:3},{value:"useSelector",id:"useselector",level:3},{value:"memo",id:"memo",level:2},{value:"getUntrackedObject",id:"getuntrackedobject",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["There are two main functions exported from the library,\n",(0,r.jsx)(t.code,{children:"createContainer"})," and ",(0,r.jsx)(t.code,{children:"createTrackedSelector"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"createTrackedSelector"})," is a building block function\nwhich takes a ",(0,r.jsx)(t.code,{children:"useSelector"})," hook and creates a ",(0,r.jsx)(t.code,{children:"useTrackedSelector"})," hook."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"createContainer"})," is a higher level function for React Context-like usage,\nwhich creates a provider and other hooks."]}),"\n",(0,r.jsx)(t.h2,{id:"createtrackedselector",children:"createTrackedSelector"}),"\n",(0,r.jsxs)(t.p,{children:["This is a function to create a hook with state usage tracking.\nIt takes one argument ",(0,r.jsx)(t.code,{children:"useSelector"}),", which is provided by\n",(0,r.jsx)(t.a,{href:"https://react-redux.js.org/api/hooks",children:"react-redux"})," or\nany other hooks with the same signature and behavior."]}),"\n",(0,r.jsxs)(t.p,{children:["The created hook ",(0,r.jsx)(t.code,{children:"useTrackedSelector"})," (or whatever named)\nis a hook that returns ",(0,r.jsx)(t.code,{children:"state"})," wrapped by Proxies for usage tracking.\nIt behaves the same as ",(0,r.jsx)(t.a,{href:"#usetrackedstate",children:"useTrackedState"})," from ",(0,r.jsx)(t.code,{children:"createContainer"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { useSelector } from 'react-redux'; // or any similar library\nimport { createTrackedSelector } from 'react-tracked';\n\nconst useTrackedSelector = createTrackedSelector(useSelector);\n\nconst Component = () => {\n  const state = useTrackedSelector();\n  // ...\n};\n"})}),"\n",(0,r.jsx)(t.h2,{id:"createcontainer",children:"createContainer"}),"\n",(0,r.jsxs)(t.p,{children:["It takes two arguments, the first argument is ",(0,r.jsx)(t.code,{children:"useValue"}),",\nwhich is a hook that returns a tuple ",(0,r.jsx)(t.code,{children:"[state, update]"}),".\nTypically, it's with useReducer or useState,\nbut it can be any custom hooks based on them."]}),"\n",(0,r.jsxs)(t.p,{children:["The second argument is ",(0,r.jsx)(t.code,{children:"options"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type Options = {\n  defaultState?: State;\n  defaultUpdate?: Update;\n  stateContextName?: string;\n  updateContextName?: string;\n  concurrentMode?: boolean;\n};\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"defaultState"})," and ",(0,r.jsx)(t.code,{children:"defaultUpdate"})," are to specify context default values in case you want something without Provider."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"stateContextName"})," and ",(0,r.jsx)(t.code,{children:"updateContextName"})," are to specify context display names."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"concurrentMode"})," is to enable using ",(0,r.jsx)(t.code,{children:"useContextUpdate"})," from ",(0,r.jsx)(t.code,{children:"use-context-selector"})," for concurrent features, available since React 18."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Note: you can create multiple containers in one app."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { createContainer } from 'react-tracked';\n\nconst useValue = (props) => useReducer(...);\n\nconst {\n  Provider,\n  useTracked,\n  useUpdate,\n  useTrackedState,\n  useSelector,\n} = createContainer(useValue);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"provider",children:"Provider"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Provider"})," returned by createContainer has to be put\nin the parent component.\nTypically, it's close to the root component,\nbut it can be (sometimes desirably) lower in the component tree."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const App = (props) => <Provider {...props}>...</Provider>;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"usetracked",children:"useTracked"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"useTracked"})," hook returned by createContainer is the recommended hook.\nIt simply returns the ",(0,r.jsx)(t.code,{children:"[state, update]"})," tuple that ",(0,r.jsx)(t.code,{children:"useValue"})," returns.\nThe ",(0,r.jsx)(t.code,{children:"state"})," is wrapped by Proxies for usage tracking."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const Component = () => {\n  const [state, dispatch] = useTracked();\n  // ...\n};\n"})}),"\n",(0,r.jsx)(t.h3,{id:"useupdate",children:"useUpdate"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"useUpdate"})," hook returned by createContainer is for ",(0,r.jsx)(t.code,{children:"update"})," from ",(0,r.jsx)(t.code,{children:"useValue"}),';\nIt\'s named "update" ambiguously, but typically\nit would be renamed to "dispatch" for useReducer,\n"setState" for useState, or any "update" function.']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const Component = () => {\n  const dispatch = useUpdate();\n  // ...\n};\n"})}),"\n",(0,r.jsx)(t.h3,{id:"usetrackedstate",children:"useTrackedState"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"useTrackedState"})," hook returned by createContainer is for ",(0,r.jsx)(t.code,{children:"state"})," from ",(0,r.jsx)(t.code,{children:"useValue"}),";\nThis is wrapped by Proxies as same as ",(0,r.jsx)(t.code,{children:"useTracked"}),".\nUse this hook if you don't need ",(0,r.jsx)(t.code,{children:"update"}),".\nThis hook is compatible with ",(0,r.jsx)(t.a,{href:"https://github.com/dai-shi/reactive-react-redux",children:"reactive-react-redux"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const Component = () => {\n  const state = useTrackedState();\n  // ...\n};\n"})}),"\n",(0,r.jsx)(t.h3,{id:"useselector",children:"useSelector"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"useSelector"})," hook returned by createContainer is an optional hook.\nUse this hook if state usage tracking doesn't work or fit well.\nThis hook is compatible with ",(0,r.jsx)(t.a,{href:"https://react-redux.js.org/api/hooks",children:"react-redux"}),".\nIt would ease transition from/to react-redux apps."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const Component = () => {\n  const selected = useSelector(selector);\n  // ...\n};\n"})}),"\n",(0,r.jsx)(t.h2,{id:"memo",children:"memo"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"memo"})," is removed in v2. With v2, we can use ",(0,r.jsx)(t.code,{children:"React.memo"}),".\nThe description below only applies to v1."]}),"\n",(0,r.jsx)(t.p,{children:"There is a utility function exported from the library."}),"\n",(0,r.jsxs)(t.p,{children:["This should be used instead of ",(0,r.jsx)(t.code,{children:"React.memo"})," if props\ninclude objects being tracked. Otherwise, usage tracking may not\nwork correctly because a memoized component doesn't always render\nwhen a parent component renders."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { memo } from 'react-tracked'; // v1 only\n\nconst ChildComponent = memo(({ num1, str1, obj1, obj2 }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"getuntrackedobject",children:"getUntrackedObject"}),"\n",(0,r.jsx)(t.p,{children:"There are some cases when we need to get an original object\ninstead of a tracked object.\nAlthough it's not a recommended pattern,\nthe library exports a function as an escape hatch."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { getUntrackedObject } from 'react-tracked';\n\nconst Component = () => {\n  const state = useTrackedState();\n  const dispatch = useUpdate();\n  const onClick = () => {\n    // this leaks a proxy outside render\n    dispatch({ type: 'FOO', value: state.foo });\n\n    // this works as expected\n    dispatch({ type: 'FOO', value: getUntrackedObject(state.foo) });\n  };\n  // ...\n};\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},7468:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var r=n(758);const s={},a=r.createContext(s);function c(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);