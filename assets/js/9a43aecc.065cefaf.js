"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[354],{8860:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>m});var o=n(7953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(n),y=a,m=u["".concat(c,".").concat(y)]||u[y]||p[y]||r;return n?o.createElement(m,s(s({ref:t},l),{},{components:n})):o.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=y;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},9800:(e,t,n)=>{n.d(t,{A:()=>s});var o=n(7953),a=n(8835);const r={tabItem:"tabItem_lILU"};function s(e){let{children:t,hidden:n,className:s}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,s),hidden:n},t)}},9259:(e,t,n)=>{n.d(t,{A:()=>E});var o=n(3911),a=n(7953),r=n(8835),s=n(2427),i=n(5926),c=n(4076),d=n(1781),l=n(3519);function u(e){return function(e){var t,n;return null!=(t=null==(n=a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=null!=t?t:u(n);return function(e){const t=(0,d.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function y(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,c.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=p(e),[s,i]=(0,a.useState)((()=>function(e){var t;let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!y({value:n,tabValues:o}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+o.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}const a=null!=(t=o.find((e=>e.default)))?t:o[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,d]=m({queryString:n,groupId:o}),[u,h]=function(e){let{groupId:t}=e;const n=function(e){return e?"docusaurus.tab."+e:null}(t),[o,r]=(0,l.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),T=(()=>{const e=null!=c?c:u;return y({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{T&&i(T)}),[T]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!y({value:e,tabValues:r}))throw new Error("Can't select invalid tab value="+e);i(e),d(e),h(e)}),[d,h,r]),tabValues:r}}var T=n(126);const g={tabList:"tabList_DfGC",tabItem:"tabItem_dqXl"};function f(e){let{className:t,block:n,selectedValue:i,selectValue:c,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),p=e=>{const t=e.currentTarget,n=l.indexOf(t),o=d[n].value;o!==i&&(u(t),c(o))},y=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{var o;const t=l.indexOf(e.currentTarget)+1;n=null!=(o=l[t])?o:l[0];break}case"ArrowLeft":{var a;const t=l.indexOf(e.currentTarget)-1;n=null!=(a=l[t])?a:l[l.length-1];break}}null==(t=n)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,o.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>l.push(e),onKeyDown:y,onClick:p},s,{className:(0,r.A)("tabs__item",g.tabItem,null==s?void 0:s.className,{"tabs__item--active":i===t})}),null!=n?n:t)})))}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function b(e){const t=h(e);return a.createElement("div",{className:(0,r.A)("tabs-container",g.tabList)},a.createElement(f,(0,o.A)({},e,t)),a.createElement(v,(0,o.A)({},e,t)))}function E(e){const t=(0,T.A)();return a.createElement(b,(0,o.A)({key:String(t)},e))}},5066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var o=n(3911),a=(n(7953),n(8860)),r=n(9259),s=n(9800);const i={id:"tutorial-04",title:"Tutorial with createContainer - ToDo App with Async Actions",sidebar_label:"ToDo App (async)"},c=void 0,d={unversionedId:"tutorial-04",id:"tutorial-04",title:"Tutorial with createContainer - ToDo App with Async Actions",description:"This tutorial shows example code with async actions.",source:"@site/docs/tutorial-04.md",sourceDirName:".",slug:"/tutorial-04",permalink:"/docs/tutorial-04",draft:!1,tags:[],version:"current",frontMatter:{id:"tutorial-04",title:"Tutorial with createContainer - ToDo App with Async Actions",sidebar_label:"ToDo App (async)"},sidebar:"docs",previous:{title:"ToDo App (useState+Immer)",permalink:"/docs/tutorial-03"},next:{title:"Person Name (redux)",permalink:"/docs/tutorial-redux-01"}},l={},u=[{value:"src/App.js",id:"srcappjs",level:2},{value:"src/store.js",id:"srcstorejs",level:2},{value:"src/TodoList.js",id:"srctodolistjs",level:2},{value:"src/TodoItem.js",id:"srctodoitemjs",level:2},{value:"src/NewTodo.js",id:"srcnewtodojs",level:2},{value:"CodeSandbox",id:"codesandbox",level:2}],p={toc:u},y="wrapper";function m(e){let{components:t,...n}=e;return(0,a.yg)(y,(0,o.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This tutorial shows example code with async actions."),(0,a.yg)("h2",{id:"srcappjs"},"src/App.js"),(0,a.yg)(r.A,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,a.yg)(s.A,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nimport { Provider } from './store';\nimport TodoList from './TodoList';\n\nconst App = () => (\n  <Provider>\n    <TodoList />\n  </Provider>\n);\n\nexport default App;\n\n"))),(0,a.yg)(s.A,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\n\nimport { Provider } from './store';\nimport TodoList from './TodoList';\n\nconst App = () => (\n  <Provider>\n    <TodoList />\n  </Provider>\n);\n\nexport default App;\n\n")))),(0,a.yg)("p",null,"This is the root component.\nIt wraps TodoList with Provider."),(0,a.yg)("h2",{id:"srcstorejs"},"src/store.js"),(0,a.yg)(r.A,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,a.yg)(s.A,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { useReducerAsync } from 'use-reducer-async';\nimport { createContainer } from 'react-tracked';\n\nconst initialState = {\n  todoIds: [],\n  todoMap: {},\n  query: '',\n  pending: false,\n  error: null,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'STARTED':\n      return {\n        ...state,\n        pending: true,\n      };\n    case 'TODO_CREATED':\n      return {\n        ...state,\n        todoIds: [...state.todoIds, action.todo.id],\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_UPDATED':\n      return {\n        ...state,\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_DELETED': {\n      const { [action.id]: _removed, ...rest } = state.todoMap;\n      return {\n        ...state,\n        todoIds: state.todoIds.filter((id) => id !== action.id),\n        todoMap: rest,\n        pending: false,\n      };\n    }\n    case 'FAILED':\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case 'QUERY_CHANGED':\n      return {\n        ...state,\n        query: action.query,\n      };\n    default:\n      throw new Error('unknown action type');\n  }\n};\n\nconst asyncActionHandlers = {\n  CREATE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const response = await fetch(`https://reqres.in/api/todos?delay=1`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ title: action.title }),\n        });\n        const data = await response.json();\n        if (typeof data.id !== 'string') throw new Error('no id');\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_CREATED', todo: data });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  TOGGLE_TODO:\n    ({ dispatch, getState }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const todo = getState().todoMap[action.id];\n        const body = {\n          ...todo,\n          completed: !todo.completed,\n        };\n        const response = await fetch(\n          `https://reqres.in/api/todos/${action.id}?delay=1`,\n          {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n          },\n        );\n        const data = await response.json();\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_UPDATED', todo: { ...data, id: action.id } });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  DELETE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        await fetch(`https://reqres.in/api/todos/${action.id}?delay=1`, {\n          method: 'DELETE',\n        });\n        dispatch({ type: 'TODO_DELETED', id: action.id });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n};\n\nconst useValue = () =>\n  useReducerAsync(reducer, initialState, asyncActionHandlers);\n\nexport const {\n  Provider,\n  useTrackedState,\n  useUpdate: useDispatch,\n} = createContainer(useValue);\n\n"))),(0,a.yg)(s.A,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Reducer } from 'react';\nimport { useReducerAsync, AsyncActionHandlers } from 'use-reducer-async';\nimport { createContainer } from 'react-tracked';\n\ntype TodoType = {\n  id: string;\n  title: string;\n  completed?: boolean;\n};\n\ntype State = {\n  todoIds: string[];\n  todoMap: { [id: string]: TodoType };\n  query: string;\n  pending: boolean;\n  error: Error | null;\n};\n\nconst initialState: State = {\n  todoIds: [],\n  todoMap: {},\n  query: '',\n  pending: false,\n  error: null,\n};\n\ntype Action =\n  | { type: 'STARTED' }\n  | { type: 'TODO_CREATED'; todo: TodoType }\n  | { type: 'TODO_UPDATED'; todo: TodoType }\n  | { type: 'TODO_DELETED'; id: string }\n  | { type: 'FAILED'; error: Error }\n  | { type: 'QUERY_CHANGED'; query: string };\n\nconst reducer: Reducer<State, Action> = (state, action) => {\n  switch (action.type) {\n    case 'STARTED':\n      return {\n        ...state,\n        pending: true,\n      };\n    case 'TODO_CREATED':\n      return {\n        ...state,\n        todoIds: [...state.todoIds, action.todo.id],\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_UPDATED':\n      return {\n        ...state,\n        todoMap: { ...state.todoMap, [action.todo.id]: action.todo },\n        pending: false,\n      };\n    case 'TODO_DELETED': {\n      const { [action.id]: _removed, ...rest } = state.todoMap;\n      return {\n        ...state,\n        todoIds: state.todoIds.filter((id) => id !== action.id),\n        todoMap: rest,\n        pending: false,\n      };\n    }\n    case 'FAILED':\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case 'QUERY_CHANGED':\n      return {\n        ...state,\n        query: action.query,\n      };\n    default:\n      throw new Error('unknown action type');\n  }\n};\n\ntype AsyncActionCreate = { type: 'CREATE_TODO'; title: string };\ntype AsyncActionToggle = { type: 'TOGGLE_TODO'; id: string };\ntype AsyncActionDelete = { type: 'DELETE_TODO'; id: string };\n\ntype AsyncAction = AsyncActionCreate | AsyncActionDelete | AsyncActionToggle;\n\nconst asyncActionHandlers: AsyncActionHandlers<\n  Reducer<State, Action>,\n  AsyncAction\n> = {\n  CREATE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const response = await fetch(`https://reqres.in/api/todos?delay=1`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ title: action.title }),\n        });\n        const data = await response.json();\n        if (typeof data.id !== 'string') throw new Error('no id');\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_CREATED', todo: data });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  TOGGLE_TODO:\n    ({ dispatch, getState }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        const todo = getState().todoMap[action.id];\n        const body = {\n          ...todo,\n          completed: !todo.completed,\n        };\n        const response = await fetch(\n          `https://reqres.in/api/todos/${action.id}?delay=1`,\n          {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n          },\n        );\n        const data = await response.json();\n        if (typeof data.title !== 'string') throw new Error('no title');\n        dispatch({ type: 'TODO_UPDATED', todo: { ...data, id: action.id } });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n  DELETE_TODO:\n    ({ dispatch }) =>\n    async (action) => {\n      try {\n        dispatch({ type: 'STARTED' });\n        await fetch(`https://reqres.in/api/todos/${action.id}?delay=1`, {\n          method: 'DELETE',\n        });\n        dispatch({ type: 'TODO_DELETED', id: action.id });\n      } catch (error) {\n        dispatch({ type: 'FAILED', error });\n      }\n    },\n};\n\nconst useValue = () =>\n  useReducerAsync<Reducer<State, Action>, AsyncAction>(\n    reducer,\n    initialState,\n    asyncActionHandlers,\n  );\n\nexport const {\n  Provider,\n  useTrackedState,\n  useUpdate: useDispatch,\n} = createContainer(useValue);\n\n")))),(0,a.yg)("p",null,"This is the store we use.\nIt is a bit long and you would eventually want to split into files.\nIt defines a reducer for normal (sync) actions.\nThen, we combine it with async actioin handlers\nto create a store."),(0,a.yg)("p",null,"In this example we use ",(0,a.yg)("inlineCode",{parentName:"p"},"use-reducer-async")," helper hook.\nIt's a tiny custom hook, and actually it's fairly easy\nto do the same thing without the custom hook."),(0,a.yg)("p",null,"You could also use ",(0,a.yg)("inlineCode",{parentName:"p"},"redux-saga")," for async actions.\nFor saga users, here is ",(0,a.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/github/dai-shi/react-tracked/tree/main/examples/13_saga"},"an example"),"."),(0,a.yg)("p",null,"Another note in this store is that it has both ",(0,a.yg)("inlineCode",{parentName:"p"},"todoIds")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"todoMap"),".\nThey are denormalized. The reason for this pattern is\nit would allow state usage tracking easier.\nIn other words, we might not need ",(0,a.yg)("inlineCode",{parentName:"p"},"React.memo")," in a certain case.\nIf you want the data in the store to be normalized,\nplease check out the array pattern in ",(0,a.yg)("a",{parentName:"p",href:"/docs/tutorial-01"},"the other Tutorial"),"."),(0,a.yg)("h2",{id:"srctodolistjs"},"src/TodoList.js"),(0,a.yg)(r.A,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,a.yg)(s.A,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\nimport TodoItem from './TodoItem';\nimport NewTodo from './NewTodo';\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const setQuery = (event) => {\n    dispatch({ type: 'QUERY_CHANGED', query: event.target.value });\n  };\n  return (\n    <div>\n      {state.error && <h1>{state.error.message}</h1>}\n      <ul>\n        {state.todoIds.map((id) => (\n          <TodoItem key={id} id={id} />\n        ))}\n        <NewTodo />\n      </ul>\n      <div>\n        Highlight Query for incomplete items:\n        <input value={state.query} onChange={setQuery} />\n      </div>\n      {state.pending && <h3>Processing...</h3>}\n    </div>\n  );\n};\n\nexport default TodoList;\n\n"))),(0,a.yg)(s.A,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\nimport TodoItem from './TodoItem';\nimport NewTodo from './NewTodo';\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const setQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'QUERY_CHANGED', query: event.target.value });\n  };\n  return (\n    <div>\n      {state.error && <h1>{state.error.message}</h1>}\n      <ul>\n        {state.todoIds.map((id) => (\n          <TodoItem key={id} id={id} />\n        ))}\n        <NewTodo />\n      </ul>\n      <div>\n        Highlight Query for incomplete items:\n        <input value={state.query} onChange={setQuery} />\n      </div>\n      {state.pending && <h3>Processing...</h3>}\n    </div>\n  );\n};\n\nexport default TodoList;\n\n")))),(0,a.yg)("p",null,"This component is to show the list of ",(0,a.yg)("inlineCode",{parentName:"p"},"TodoItem"),"s,\n",(0,a.yg)("inlineCode",{parentName:"p"},"NewTodo")," to create a new item, and\na text field for highlight query.\nIt will also show error and pending states."),(0,a.yg)("p",null,"Notice it only passes ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"TodoItem"),"."),(0,a.yg)("h2",{id:"srctodoitemjs"},"src/TodoItem.js"),(0,a.yg)(r.A,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,a.yg)(s.A,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\n\nconst renderHighlight = (title, query) => {\n  if (!query) return title;\n  const index = title.indexOf(query);\n  if (index === -1) return title;\n  return (\n    <>\n      {title.slice(0, index)}\n      <b>{query}</b>\n      {title.slice(index + query.length)}\n    </>\n  );\n};\n\nconst TodoItem = ({ id }) => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const todo = state.todoMap[id];\n  const delTodo = () => {\n    dispatch({ type: 'DELETE_TODO', id: todo.id });\n  };\n  return (\n    <li>\n      <input\n        type=\"checkbox\"\n        checked={!!todo.completed}\n        onChange={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\n      />\n      <span\n        style={{\n          textDecoration: todo.completed ? 'line-through' : 'none',\n        }}\n      >\n        {todo.completed ? todo.title : renderHighlight(todo.title, state.query)}\n      </span>\n      <button onClick={delTodo}>Delete</button>\n    </li>\n  );\n};\n\nexport default React.memo(TodoItem);\n\n"))),(0,a.yg)(s.A,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\n\nimport { useDispatch, useTrackedState } from './store';\n\nconst renderHighlight = (title: string, query: string) => {\n  if (!query) return title;\n  const index = title.indexOf(query);\n  if (index === -1) return title;\n  return (\n    <>\n      {title.slice(0, index)}\n      <b>{query}</b>\n      {title.slice(index + query.length)}\n    </>\n  );\n};\n\ntype Props = {\n  id: string;\n};\n\nconst TodoItem = ({ id }: Props) => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const todo = state.todoMap[id];\n  const delTodo = () => {\n    dispatch({ type: 'DELETE_TODO', id: todo.id });\n  };\n  return (\n    <li>\n      <input\n        type=\"checkbox\"\n        checked={!!todo.completed}\n        onChange={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\n      />\n      <span\n        style={{\n          textDecoration: todo.completed ? 'line-through' : 'none',\n        }}\n      >\n        {todo.completed ? todo.title : renderHighlight(todo.title, state.query)}\n      </span>\n      <button onClick={delTodo}>Delete</button>\n    </li>\n  );\n};\n\nexport default React.memo(TodoItem);\n\n")))),(0,a.yg)("p",null,"This is the TodoItem component.\nIt dispathes async actions,\nbut it doesn't need to know if an action is sync or async."),(0,a.yg)("h2",{id:"srcnewtodojs"},"src/NewTodo.js"),(0,a.yg)(r.A,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"TabsUsedByRemarkPluginTs2Js"},(0,a.yg)(s.A,{value:"js",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react';\n\nimport { useDispatch } from './store';\n\nconst NewTodo = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const addTodo = () => {\n    dispatch({ type: 'CREATE_TODO', title: text });\n    setText('');\n  };\n  return (\n    <li>\n      <input\n        value={text}\n        placeholder=\"Enter title...\"\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={addTodo}>Add</button>\n    </li>\n  );\n};\n\nexport default React.memo(NewTodo);\n\n"))),(0,a.yg)(s.A,{value:"ts",mdxType:"TabItemUsedByRemarkPluginTs2Js"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import React, { useState } from 'react';\n\nimport { useDispatch } from './store';\n\nconst NewTodo = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const addTodo = () => {\n    dispatch({ type: 'CREATE_TODO', title: text });\n    setText('');\n  };\n  return (\n    <li>\n      <input\n        value={text}\n        placeholder=\"Enter title...\"\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={addTodo}>Add</button>\n    </li>\n  );\n};\n\nexport default React.memo(NewTodo);\n\n")))),(0,a.yg)("p",null,"This is the NewTodo component to create a new item.\nIt uses a local state for the text field."),(0,a.yg)("h2",{id:"codesandbox"},"CodeSandbox"),(0,a.yg)("p",null,"You can try ",(0,a.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/festive-wiles-es8ss"},"working example"),"."))}m.isMDXComponent=!0}}]);